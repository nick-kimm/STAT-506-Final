---
title: "506-Final"
author: "Nick Kim"
format: html
---

## What makes a Championship Roster?

```{r}
library(nflreadr)
library(nflverse)
library(dbplyr)
```
Contract data
```{r}
nflreadr::dictionary_contracts
contracts<-as.data.frame(nflreadr::load_contracts())
contracts
```
Roster data per season
```{r}
nflreadr::dictionary_rosters
cur_season<-as.data.frame(nflreadr::load_rosters())
unique(cur_season$status)
```
```{r}
cur_season[cur_season$status=="RES"|cur_season$status=="ACT",]|>
  merge(x=_,contracts[,c(10,16)],by="gsis_id")|>
  _[,c(1:4,8,37)]
```
```{r}
test<-contracts[contracts$gsis_id == "00-0023459" & !is.na(contracts$gsis_id), c(1,3,5:6,10)]
test
```
```{r}
b<-test[
  test$year_signed <= 2021 &  # Contract signed before or in the target year
  (test$year_signed + test$years - 1) >= 2021,  # Contract still valid in the target year
]
b
b[b$year_signed==max(b$year_signed),]
```

```{r}
library(dplyr)
target_yr = 2024
fil<-contracts[
  contracts$year_signed <= target_yr & 
    (contracts$years + contracts$year_signed - 1)>= target_yr,
]

fil<-fil %>% 
  group_by(gsis_id) %>% 
  filter(year_signed == max(year_signed) & is_active == TRUE) %>% 
  ungroup()

fil
```

```{r}
test<-cur_season[cur_season$status=="RES"|cur_season$status=="ACT",]|>
  merge(x=_,fil[,c(10,16)],by="gsis_id")|>
  _[,c(1:4,8,37)]

test
```
```{r}
fil[fil$gsis_id == "00-0036195"|fil$gsis_id =="00-0035961"|fil$gsis_id =="00-0036695"|fil$gsis_id =="00-0038567" & !is.na(fil$gsis_id), ]
test[test$team == "ARI",]
```
Now need to implement a function to create this dataset for all seasons I want to test
```{r}
cappy <- function(year){
  season<-as.data.frame(nflreadr::load_rosters(year))
  
  fil<-contracts[
  contracts$year_signed <= target_yr & 
    (contracts$years + contracts$year_signed - 1)>= target_yr,
  ] %>% 
    group_by(gsis_id) %>% 
    filter(year_signed == max(year_signed) & is_active == TRUE) %>% 
    ungroup()
  
  cap_season<-season[season$status=="RES"|season$status=="ACT",] %>% 
    merge(fil[,c("apy_cap_pct","gsis_id")],by="gsis_id") %>% 
    select(gsis_id, season, team, position, full_name, apy_cap_pct)
  return(cap_season)
}
```

```{r}
all_seasons <- vector(mode = "list", length = 25)
i <- 1
for (yr in 2000:2024){
  all_seasons[[i]] <- cappy(yr)
  i = i + 1
}
```
```{r}
df <- do.call("rbind", all_seasons)
df[df$season==2024,]
all_seasons[[25]]
```


