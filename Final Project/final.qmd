---
title: "506-Final"
author: "Nick Kim"
format: html
---

## What makes a Championship Roster?

```{r}
library(nflreadr)
library(nflverse)
library(dbplyr)
```
Contract data
```{r}
nflreadr::dictionary_contracts
contracts<-as.data.frame(nflreadr::load_contracts())
contracts
```
Roster data per season
```{r}
nflreadr::dictionary_rosters
cur_season<-as.data.frame(nflreadr::load_rosters())
unique(cur_season$status)
```
```{r}
cur_season[cur_season$status=="RES"|cur_season$status=="ACT",]|>
  merge(x=_,contracts[,c(10,16)],by="gsis_id")|>
  _[,c(1:4,8,37)]
```
```{r}
test<-contracts[contracts$gsis_id == "00-0023459" & !is.na(contracts$gsis_id), c(1,3,5:6,10)]
test
```

```{r}
library(dplyr)
target_yr = 2017
fil<-contracts[
  contracts$year_signed <= target_yr & 
    (contracts$years + contracts$year_signed - 1)>= target_yr,
]

fil<-fil %>% 
  group_by(gsis_id) %>% 
  filter(year_signed == max(year_signed)) %>% slice_tail(n=1)

#took last row as from looking at how OTC formats data in goes sequentially where last row is latest

fil
```
```{r}
test<-cur_season[cur_season$status=="RES"|cur_season$status=="ACT",]|>
  merge(x=_,fil[,c(10,16)],by="gsis_id")|>
  _[,c(1:4,8,37)]

test
```

Now need to implement a function to create this dataset for all seasons I want to test
```{r}
cappy <- function(year){
  season<-as.data.frame(nflreadr::load_rosters(year))
  
  fil<-contracts[
  contracts$year_signed <= year & 
    (contracts$years + contracts$year_signed - 1)>= year,
  ] %>% 
    group_by(gsis_id) %>% 
    filter(year_signed == max(year_signed)) %>% 
    slice_tail(n=1)
  

  
  cap_season<-season[season$status=="RES"|season$status=="ACT",] %>% 
    merge(fil[,c("apy_cap_pct","gsis_id")],by="gsis_id") %>% 
    select(gsis_id, season, team, position, full_name, apy_cap_pct)
  return(cap_season)
}
```

```{r}
all_seasons <- vector(mode = "list", length = 25)
i <- 1
for (yr in 2000:2024){
  all_seasons[[i]] <- cappy(yr)
  i = i + 1
}
```
```{r}
df <- do.call("rbind", all_seasons)
df$team <-replace(df$team,df$team=="SL", "LA") #renaming SL to LA due to relocation of the franchise to LA in last decade

```
```{r}
all_seasons[[18]][all_seasons[[18]]$full_name=="Matthew Stafford",]
```


Process to implement logistic regression

First need dataframe with all previous champions
```{r}
champs <- data.frame(
  season = c(2000:2023),
  champ = c("BAL","NE","TB","NE","NE","PIT","IND","NYG","PIT","NO","GB","NYG","BAL","SEA","NE",
            "DEN","NE","PHI","NE","KC","TB","LA","KC","KC")
)
```

adding binary var of champ to dataset
```{r}
df <- merge(df, champs, by = "season", all.x = TRUE)

df$is_champ <- ifelse(df$team==df$champ,1,0)

df
```

```{r}
unique(df$team)
length(unique(df$team))
```

Need to rename ARZ to ARI, SD to LAC, OAK to LV, HST to HOU, BLT to BAL, STL to LA, CLE to CLV

```{r}
team_rename <- c("ARZ" = "ARI", "SD" = "LAC", "OAK" = "LV", "HST" = "HOU", "BLT" = "BAL", "STL" = "LA", "CLE" = "CLV")

df$team <- ifelse(!is.na(match(df$team, names(team_rename))), team_rename[df$team], df$team)

unique(df$team)
length(unique(df$team))
```

Looking to see what year to run analysis on. There are 11 starting positions, and 53 total roster spots.
```{r}
for (yr in 2000:2024){
  print(yr)
  print(table(df[df$season==yr,"team"]))
}
```

```{r}
df_fil <- df[df$season>=2009,]

df_pos<-df_fil %>% group_by(season, team, position) %>% 
  summarise(cap_by_pos = sum(apy_cap_pct),.groups = "drop") %>% ungroup() %>% 
  group_by(season, team) %>% 
  mutate(total_cap = sum(cap_by_pos),
         prop_pos_cap = cap_by_pos/total_cap)

unique(df$position)
df_pos[df_pos$position=="SPEC",]
df_pos
```

```{r}
team_dat <- df_pos %>%
  group_by(season, team) %>%
  summarize(
    qb_cap_pct = sum(cap_by_pos[position == "QB"], na.rm = TRUE),
    rb_cap_pct = sum(cap_by_pos[position == "RB"], na.rm = TRUE),
    wr_cap_pct = sum(cap_by_pos[position == "WR"], na.rm = TRUE),
    te_cap_pct = sum(cap_by_pos[position == "TE"], na.rm = TRUE),
    ol_cap_pct = sum(cap_by_pos[(position == "OL"|position == "C"|position == "G"|position == "T")], na.rm = TRUE),
    lb_cap_pct = sum(cap_by_pos[(position == "LB"|position == "ILB"|position == "OLB"|position == "MLB")], na.rm = TRUE),
    dl_cap_pct = sum(cap_by_pos[(position == "DL"|position == "DE"|position == "DT"|position == "NT")],na.rm=TRUE),
    db_cap_pct = sum(cap_by_pos[position == "DB"], na.rm = TRUE),
    s_cap_pct = sum(cap_by_pos[(position == "FS"|position == "SS"|position == "S")]),
    spec_cap_pct = sum(cap_by_pos[(position == "K"|position =="P"|position == "KR"|position == "LS")]),
    
    total_cap_pct = sum(cap_by_pos, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  left_join(champs, by = "season") %>%
  mutate(is_champion = ifelse(team == champ, 1, 0))

```

```{r}
library(ggplot2)

ggplot(df_pos,aes(x=team,fill=position))+
  geom_histogram(position = "fill")
```


splitting into train and test
```{r}
pred_24 <- team_dat[team_dat$season==2024,]


smp_size <- floor(0.75 * nrow(team_dat[team_dat$season<2024,]))

set.seed(123)
train_ind <- sample(seq_len(nrow(team_dat[team_dat$season<2024,])), size = smp_size)

train <- team_dat[train_ind,]
test <- team_dat[-train_ind,]

model <- glm(is_champion ~ qb_cap_pct + rb_cap_pct + wr_cap_pct + te_cap_pct + ol_cap_pct + lb_cap_pct + db_cap_pct + dl_cap_pct + s_cap_pct + spec_cap_pct + total_cap_pct, 
             data = train, 
             family = "binomial")
summary(model)
```
```{r}
pred<-predict(model,newdata=test,type="response")
pred_champ<-ifelse(pred>0.5,1,0)
library(caret)
confusionMatrix(as.factor(pred_champ), as.factor(test$is_champion))
```
See that class imbalance might have an effect on model. Will account for this by adding class weights
```{r}
class_weights <- ifelse(train$is_champion==1,
                        1/sum(train$is_champion==1,na.rm=TRUE),
                        1/sum(train$is_champion==0,na.rm=TRUE))

model_w <- glm(is_champion ~ qb_cap_pct + rb_cap_pct + wr_cap_pct + te_cap_pct + ol_cap_pct + lb_cap_pct + db_cap_pct + dl_cap_pct + s_cap_pct + spec_cap_pct + total_cap_pct, 
             data = train, 
             family = "binomial",
             weights = class_weights)

summary(model_w)
```

```{r}
pred<-predict(model_w,newdata=test,type="response")
pred_champ<-ifelse(pred>0.5,1,0)
confusionMatrix(as.factor(pred_champ), as.factor(test$is_champion))
```

```{r}
library(pROC)
roc_curve <- roc(test$is_champion, pred_champ)
plot(roc_curve)
auc(roc_curve)
```
Trying different models
```{r}
library(randomForest)

rf_model <- randomForest(as.factor(is_champion) ~ qb_cap_pct + rb_cap_pct + wr_cap_pct + te_cap_pct + ol_cap_pct + lb_cap_pct + db_cap_pct + dl_cap_pct + s_cap_pct + spec_cap_pct ,
                         data = train,
                         classwt = c("0" = 1, "1" = 5),
                         na.action=na.exclude)  

pred_r<-predict(model_w,newdata=test,type="response")
pred_champ_r<-ifelse(pred_r>0.5,1,0)
confusionMatrix(as.factor(pred_champ_r), as.factor(test$is_champion))

```

xgboost
```{r}
library(xgboost)

# Prepare data for xgboost
x <- as.matrix(train[, c("qb_cap_pct", "rb_cap_pct", "wr_cap_pct", "lb_cap_pct", "db_cap_pct","te_cap_pct","ol_cap_pct","dl_cap_pct","s_cap_pct","spec_cap_pct","total_cap_pct")])
y <- train$is_champion

# Fit an XGBoost model with scale_pos_weight
xgb_model <- xgboost(data = x, label = y, objective = "binary:logistic", scale_pos_weight = 5, nrounds = 100)
```
```{r}
test_x <- as.matrix(test[, c("qb_cap_pct", "rb_cap_pct", "wr_cap_pct", "lb_cap_pct", "db_cap_pct","te_cap_pct","ol_cap_pct","dl_cap_pct","s_cap_pct","spec_cap_pct","total_cap_pct")])

pred_xg<-predict(xgb_model,newdata=test_x,type="response")
pred_champ_xg<-ifelse(pred_xg>0.5,1,0)
confusionMatrix(as.factor(pred_champ_xg), as.factor(test$is_champion))
```

Predicting the 2024 NFL Champion
```{r}
pred_24_xgb <- as.matrix(pred_24[, c("qb_cap_pct", "rb_cap_pct", "wr_cap_pct", "lb_cap_pct", "db_cap_pct","te_cap_pct","ol_cap_pct","dl_cap_pct","s_cap_pct","spec_cap_pct","total_cap_pct")])
pred<-predict(xgb_model,newdata=pred_24_xgb,type="response")
order(pred, decreasing = TRUE)
pred_24[order(pred, decreasing = TRUE),]
```




