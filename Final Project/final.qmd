---
title: "506-Final"
author: "Nick Kim"
format: html
---

## What makes a Championship Roster?

```{r}
library(nflreadr)
library(nflverse)
library(dbplyr)
```
Contract data
```{r}
nflreadr::dictionary_contracts
contracts<-as.data.frame(nflreadr::load_contracts())
contracts
```
Roster data per season
```{r}
nflreadr::dictionary_rosters
cur_season<-as.data.frame(nflreadr::load_rosters())
unique(cur_season$status)
```
```{r}
cur_season[cur_season$status=="RES"|cur_season$status=="ACT",]|>
  merge(x=_,contracts[,c(10,16)],by="gsis_id")|>
  _[,c(1:4,8,37)]
```
```{r}
test<-contracts[contracts$gsis_id == "00-0023459" & !is.na(contracts$gsis_id), c(1,3,5:6,10)]
test
```

```{r}
library(dplyr)
target_yr = 2017
fil<-contracts[
  contracts$year_signed <= target_yr & 
    (contracts$years + contracts$year_signed - 1)>= target_yr,
]

fil<-fil %>% 
  group_by(gsis_id) %>% 
  filter(year_signed == max(year_signed)) %>% slice_tail(n=1)

#took last row as from looking at how OTC formats data in goes sequentially where last row is latest

fil
```
```{r}
test<-cur_season[cur_season$status=="RES"|cur_season$status=="ACT",]|>
  merge(x=_,fil[,c(10,16)],by="gsis_id")|>
  _[,c(1:4,8,37)]

test
```

Now need to implement a function to create this dataset for all seasons I want to test
```{r}
cappy <- function(year){
  season<-as.data.frame(nflreadr::load_rosters(year))
  
  fil<-contracts[
  contracts$year_signed <= year & 
    (contracts$years + contracts$year_signed - 1)>= year,
  ] %>% 
    group_by(gsis_id) %>% 
    filter(year_signed == max(year_signed)) %>% 
    slice_tail(n=1)
  

  
  cap_season<-season[season$status=="RES"|season$status=="ACT",] %>% 
    merge(fil[,c("apy_cap_pct","gsis_id")],by="gsis_id") %>% 
    select(gsis_id, season, team, position, full_name, apy_cap_pct)
  return(cap_season)
}
```

```{r}
all_seasons <- vector(mode = "list", length = 25)
i <- 1
for (yr in 2000:2024){
  all_seasons[[i]] <- cappy(yr)
  i = i + 1
}
```
```{r}
df <- do.call("rbind", all_seasons)
df$team <-replace(df$team,df$team=="SL", "LA") #renaming SL to LA due to relocation of the franchise to LA in last decade

```
```{r}
all_seasons[[18]][all_seasons[[18]]$full_name=="Matthew Stafford",]
```


Process to implement logistic regression

First need dataframe with all previous champions
```{r}
champs <- data.frame(
  season = c(2000:2023),
  champ = c("BAL","NE","TB","NE","NE","PIT","IND","NYG","PIT","NO","GB","NYG","BAL","SEA","NE",
            "DEN","NE","PHI","NE","KC","TB","LA","KC","KC")
)
```

adding binary var of champ to dataset
```{r}
df <- merge(df, champs, by = "season", all.x = TRUE)

df$is_champ <- ifelse(df$team==df$champ,1,0)

df
```

```{r}
unique(df$team)
length(unique(df$team))
```

Need to rename ARZ to ARI, SD to LAC, OAK to LV, HST to HOU, BLT to BAL, STL to LA, CLE to CLV

```{r}
team_rename <- c("ARZ" = "ARI", "SD" = "LAC", "OAK" = "LV", "HST" = "HOU", "BLT" = "BAL", "STL" = "LA", "CLE" = "CLV")

df$team <- ifelse(!is.na(match(df$team, names(team_rename))), team_rename[df$team], df$team)

unique(df$team)
length(unique(df$team))
```

Looking to see what year to run analysis on. There are 11 starting positions, and 53 total roster spots.
```{r}
for (yr in 2000:2024){
  print(yr)
  print(table(df[df$season==yr,"team"]))
}
```

```{r}
df_fil <- df[df$season>=2009,]

glm(is_champ ~ as.factor(team)*apy_cap_pct, data = df_fil, family = "binomial")
```









