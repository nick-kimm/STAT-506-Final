---
title: "HW6"
author: "Nick Kim"
format: html
---

Link to [github]("https://github.com/nick-kimm/STAT-506-Final-HW6.git")

## Problem 1

```{r}
library(DBI)     # For interfacing with a database

# Import the SQLite database of the Lahman data
lahman <- dbConnect(RSQLite::SQLite(), "/Users/nicholaskim/Documents/STAT 506/HW6/lahman_1871-2022.sqlite")
lahman
```

Helper function
```{r}
#' db function
#'This function will shorten the function name we will call when using dbConnect for ease of use for the user
#' @param connection 
#' @param query 
#'
#' @return output from dbConnect function
gg <- function(connection,query){
  dbGetQuery(connection,query)
}
```

## part a:
```{r}
dbListFields(lahman,"Teams")
dbListFields(lahman, "Fielding")
```
```{r}
rf<-gg(lahman,"
   SELECT teamID, playerID, PO, A, InnOuts, 3*((PO + A)*1.0/InnOuts) AS RF
   FROM Fielding 
   WHERE InnOuts > 0
   GROUP BY playerID
   ")
rf
```
```{r}
library(dplyr)

rf  %>% group_by(teamID) %>% 
  summarise(avg_rf = mean(RF,na.rm=TRUE))
```

```{r}
set.seed(1234)

nsim <- 1000

strat_avg <- list()
teams <- unique(rf$teamID)
  
for (i in 1:nsim) {
  boot_indexes <- c()
  for (t in teams) {
    indexes <- which(rf$teamID == t)
    boot_indexes <- append(boot_indexes, sample(indexes, size = nrow(rf[rf$teamID == t, ]), replace = TRUE))
  }
  boot_sample <- rf[boot_indexes, c("teamID", "RF")]
  strat_avg[[i]] <- aggregate(RF ~ teamID, data = boot_sample, mean)
}
  
boot_mat <- do.call(rbind, lapply(seq_along(strat_avg), function(i) {
    cbind(strat_avg[[i]], iteration = i)
  }))
  

bootstrap_results <- boot_mat %>%
    group_by(teamID) %>%
    summarize(
      avg_RF = mean(RF),                       
      SE_RF = sd(RF) / sqrt(nsim),            
      .groups = 'drop'
    )
  
bootstrap_results

```

## Parallel method:

```{r}
library(parallel)

nsim <- 1000

set.seed(1234)

strat_boot <- function(iter){
  boot_indexes <- c()
  for (t in teams) {
    indexes <- which(rf$teamID == t)
    boot_indexes <- append(boot_indexes, sample(indexes, size = nrow(rf[rf$teamID == t, ]), replace = TRUE))
  }
  boot_sample <- rf[boot_indexes, c("teamID", "RF")]
  return(aggregate(RF ~ teamID, data = boot_sample, mean))
}


cl <- makeCluster(4)
clusterExport(cl, c("rf", "nsim", "teams", "boot"))
avg_rf <- parLapply(cl, seq_len(nsim), strat_boot)
stopCluster(cl)

boot_mat <- do.call(rbind, lapply(seq_along(avg_rf), function(i) {
    cbind(avg_rf[[i]], iteration = i)
  }))
  

bootstrap_results_p <- boot_mat %>%
    group_by(teamID) %>%
    summarize(
      avg_RF = mean(RF),                       
      SE_RF = sd(RF) / sqrt(nsim),            
      .groups = 'drop'
    )
  
bootstrap_results_p

```



