---
title: "HW6"
author: "Nick Kim"
format: html
---

Link to [github]("https://github.com/nick-kimm/STAT-506-Final-HW6.git")

## Problem 1

```{r}
library(DBI)     # For interfacing with a database

# Import the SQLite database of the Lahman data
lahman <- dbConnect(RSQLite::SQLite(), "/Users/nicholaskim/Documents/STAT 506/HW6/lahman_1871-2022.sqlite")
lahman
```

Helper function
```{r}
#' db function
#'This function will shorten the function name we will call when using dbConnect for ease of use for the user
#' @param connection 
#' @param query 
#'
#' @return output from dbConnect function
gg <- function(connection,query){
  dbGetQuery(connection,query)
}
```

## part a:
```{r}
dbListFields(lahman,"Teams")
dbListFields(lahman, "Fielding")
```
```{r}
gg(lahman,"
   SELECT teamID, name
   FROM Teams
   GROUP BY teamID
   ")

```
```{r}
rf<-gg(lahman,"
   SELECT t.name, f.teamID, f.playerID, f.PO, f.A, f.InnOuts, 3*((f.PO + f.A)*1.0/f.InnOuts) AS RF
   FROM Fielding AS f
    LEFT JOIN (
      SELECT teamID, name 
      FROM Teams
      GROUP BY teamID
    ) AS t ON t.teamID = f.teamID
    WHERE f.InnOuts > 0
    GROUP BY f.playerID
   ")
rf
```
```{r}
library(dplyr)

rf %>% group_by(teamID) %>% 
  summarise(avg_rf = mean(RF,na.rm=TRUE))
```

## Non parallel method:
```{r}
set.seed(1234)

boot <- function(data, n_sim = 1000){
  teams <- unique(data$teamID)
  strat <- list()
  est_theta <- numeric(length(teams)) 
  names(est_theta) <- teams
  for (i in 1:n_sim){
    for (t in teams){
      indexes <- which(data$teamID==t)
      boot_index <- sample(indexes,size=nrow(data[data$teamID==t,]),replace=TRUE)
      est_theta[t] <- mean(rf[boot_index,"RF"], na.rm=TRUE)
    }
    strat[[i]]<-est_theta
  }
  boot_mat<-do.call(rbind,strat)
  theta_bar <- colMeans(boot_mat)
  boot_se <- c()
    
  for (i in 1:length(teams)){
    boot_se[i] <- sqrt(sum((boot_mat[,i]-theta_bar[i])^2)/(nsim-1))
  }
  return(data.frame(team = teams,
           standard_error = boot_se))
}

boot(rf)
```

```{r}
set.seed(1234)

# Function to calculate average RF for bootstrapped samples
bootstrap_rf <- function(data, n_bootstrap = 1000) {
  bootstrapped_sd <- numeric(n_bootstrap)
  for (i in 1:n_bootstrap) {
    boot_sample <- do.call(rbind, lapply(split(data, data$teamID), function(group) {
      group[sample(1:nrow(group), size = nrow(group), replace = TRUE), ]
    }))
    avg_rf <- aggregate(RF ~ teamID, data = boot_sample, mean)
    bootstrapped_sd[i] <- mean(avg_rf$RF) # Mean of RF for each bootstrap iteration
  }
  return(sd(bootstrapped_sd)) # Return the standard deviation of the bootstrapped means
}

sd_no_parallel <- bootstrap_rf(rf)
print(sd_no_parallel)

```


## Parallel method:

```{r}
library(parallel)

nsim <- 1000

cl <- makeCluster(4)
clusterExport(cl, c("rf", "boot"))
res3 <- parLapply(cl, seq_len(nsim), function(x) boot(df))
stopCluster(cl)
```



